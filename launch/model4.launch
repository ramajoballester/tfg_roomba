<launch>
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find tfg_roomba)/worlds/own_created_world.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <param name="robot_description"
    command="$(find xacro)/xacro '$(find tfg_roomba)/urdf/roomba.xacro'" />

  <!-- send fake joint values -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
  </node>

  <!-- Combine joint values -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  <!-- Show in Rviz   -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find tfg_roomba)/config/roomba_amcl.rviz"/>

  <node pkg="map_server" type="map_server" args="$(find tfg_roomba)/map/map.yaml"
     respawn="true" name="map_server" />

  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model roomba -param robot_description"/>


    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find tfg_roomba)/config/roomba_control.yaml" command="load"/>

    <!-- load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
      output="log" ns="/roomba" args="differential_drive_controller"/>

  <!-- output="screen" ns="/roomba" args="joint_state_controller
  					  right_wheel_joint_velocity_controller
  					  left_wheel_joint_velocity_controller"/> -->


    <node name="joystick_publisher" pkg="tfg_roomba" type="ps3_node.py"/>
    <node name="joystick_to_cmd" pkg="tfg_roomba" type="roomba_cmd.py"/>

    <node name="mapping" pkg="gmapping" type="slam_gmapping" args="scan:=/roomba/laser/scan">
      <param name="base_frame" value="base"/>
    </node>



</launch>
